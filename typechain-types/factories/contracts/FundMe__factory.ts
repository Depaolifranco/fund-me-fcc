/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { FundMe, FundMeInterface } from "../../contracts/FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FundMe__NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cheaperWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "funder",
        type: "address",
      },
    ],
    name: "getAddressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getFunder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPriceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b506040516200146338038062001463833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112dd620001866000396000818161041201528181610661015281816106b101526108ee01526112dd6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610be8565b610321565b6040516100d79190610c2e565b60405180910390f35b3480156100ec57600080fd5b506100f5610369565b6040516101029190610c2e565b60405180910390f35b610113610410565b005b34801561012157600080fd5b5061012a610650565b6040516101379190610c2e565b60405180910390f35b34801561014c57600080fd5b5061015561065d565b6040516101629190610c58565b60405180910390f35b34801561017757600080fd5b50610180610685565b60405161018d9190610cd2565b60405180910390f35b61019e6101e7565b005b6101a86106af565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610d19565b6109ba565b6040516101de9190610c58565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a0290919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610da3565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b59190610df2565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610e5d565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610495576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610540576000600182815481106104bb576104ba610e8a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053890610eb9565b915050610498565b50600067ffffffffffffffff81111561055c5761055b610f02565b5b60405190808252806020026020018201604052801561058a5781602001602082028036833780820191505090505b50600190805190602001906105a0929190610ade565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105c790610f62565b60006040518083038185875af1925050503d8060008114610604576040519150601f19603f3d011682016040523d82523d6000602084013e610609565b606091505b505090508061064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064490610fc3565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610734576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561077a573d6000803e3d6000fd5b50600060018054806020026020016040519081016040528092919081815260200182805480156107ff57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b5575b5050505050905060005b815181101561088957600082828151811061082757610826610e8a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061088190610eb9565b915050610809565b50600067ffffffffffffffff8111156108a5576108a4610f02565b5b6040519080825280602002602001820160405280156108d35781602001602082028036833780820191505090505b50600190805190602001906108e9929190610ade565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161093090610f62565b60006040518083038185875af1925050503d806000811461096d576040519150601f19603f3d011682016040523d82523d6000602084013e610972565b606091505b50509050806109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad90610fc3565b60405180910390fd5b5050565b6000600182815481106109d0576109cf610e8a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a0e83610a3e565b90506000670de0b6b3a76400008583610a279190610fe3565b610a31919061106c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abf9190611115565b5050509150506402540be40081610ad69190611190565b915050919050565b828054828255906000526020600020908101928215610b57579160200282015b82811115610b565782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610afe565b5b509050610b649190610b68565b5090565b5b80821115610b81576000816000905550600101610b69565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb582610b8a565b9050919050565b610bc581610baa565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b600060208284031215610bfe57610bfd610b85565b5b6000610c0c84828501610bd3565b91505092915050565b6000819050919050565b610c2881610c15565b82525050565b6000602082019050610c436000830184610c1f565b92915050565b610c5281610baa565b82525050565b6000602082019050610c6d6000830184610c49565b92915050565b6000819050919050565b6000610c98610c93610c8e84610b8a565b610c73565b610b8a565b9050919050565b6000610caa82610c7d565b9050919050565b6000610cbc82610c9f565b9050919050565b610ccc81610cb1565b82525050565b6000602082019050610ce76000830184610cc3565b92915050565b610cf681610c15565b8114610d0157600080fd5b50565b600081359050610d1381610ced565b92915050565b600060208284031215610d2f57610d2e610b85565b5b6000610d3d84828501610d04565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d8d601b83610d46565b9150610d9882610d57565b602082019050919050565b60006020820190508181036000830152610dbc81610d80565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dfd82610c15565b9150610e0883610c15565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e3d57610e3c610dc3565b5b828201905092915050565b600081519050610e5781610ced565b92915050565b600060208284031215610e7357610e72610b85565b5b6000610e8184828501610e48565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ec482610c15565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ef757610ef6610dc3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f4c600083610f31565b9150610f5782610f3c565b600082019050919050565b6000610f6d82610f3f565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610fad600b83610d46565b9150610fb882610f77565b602082019050919050565b60006020820190508181036000830152610fdc81610fa0565b9050919050565b6000610fee82610c15565b9150610ff983610c15565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561103257611031610dc3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107782610c15565b915061108283610c15565b9250826110925761109161103d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110bc8161109d565b81146110c757600080fd5b50565b6000815190506110d9816110b3565b92915050565b6000819050919050565b6110f2816110df565b81146110fd57600080fd5b50565b60008151905061110f816110e9565b92915050565b600080600080600060a0868803121561113157611130610b85565b5b600061113f888289016110ca565b955050602061115088828901611100565b945050604061116188828901610e48565b935050606061117288828901610e48565b9250506080611183888289016110ca565b9150509295509295909350565b600061119b826110df565b91506111a6836110df565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111e5576111e4610dc3565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561122257611221610dc3565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561125f5761125e610dc3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561129c5761129b610dc3565b5b82820290509291505056fea264697066735822122014289979a78c98dc788c085f916a3a7c0b37b709adb7957015f42edb58a79d3964736f6c63430008080033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeedAddress, overrides || {}) as Promise<FundMe>;
  }
  override getDeployTransaction(
    priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeedAddress, overrides || {});
  }
  override attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  override connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
